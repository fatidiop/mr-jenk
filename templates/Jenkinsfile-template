// templates/Jenkinsfile-template
pipeline {
    agent any
    
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Deployment environment')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run automated tests')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to build')
    }
    
    environment {
        DOCKER_REGISTRY = credentials('docker-registry')
        GITHUB_TOKEN = credentials('github-token')
        DEPLOY_KEY = credentials('deploy-key')
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: params.BRANCH, url: 'https://github.com/fatidiop/buy-01.git'
            }
        }
        
        stage('Build') {
            steps {
                script {
                    try {
                        sh './mvnw clean package'
                    } catch (Exception e) {
                        notifyBuildStatus('Build Failed')
                        error "Build failed: ${e.message}"
                    }
                }
            }
        }
        
        stage('Test') {
            when { expression { params.RUN_TESTS } }
            steps {
                script {
                    try {
                        sh './mvnw test'
                        junit '**/target/surefire-reports/*.xml'
                    } catch (Exception e) {
                        notifyBuildStatus('Tests Failed')
                        error "Tests failed: ${e.message}"
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    sh './security-scan.sh'
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    try {
                        sh "./scripts/pipeline/deploy.sh ${params.ENVIRONMENT}"
                    } catch (Exception e) {
                        sh "./scripts/pipeline/rollback.sh ${params.ENVIRONMENT}"
                        notifyBuildStatus('Deployment Failed')
                        error "Deployment failed: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            junit '**/target/surefire-reports/*.xml'
        }
        success {
            notifyBuildStatus('Success')
        }
        failure {
            notifyBuildStatus('Failed')
        }
    }
}